{
	// Place your AtCoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"std in and out": {
		"prefix": "prep",
		"body": [
			"def ii():return int(input())",
			"def iim():return map(int,input().split())",
			"def iil():return list(map(int,input().split()))",
		],
		"description": "template for AtCoder in python3"
	},
	"bfs": {
		"prefix": "bfs",
		"body": [
			"from collections import deque",
			"def bfs(u,n,d):",
			"\t'''",
			"\tBFS:O(N*(edge number))",
			"\t@params",
			"\t\tint u: initial node ",
			"\t\tint n: number of total nodes ",
			"\t\tdict d: graph of all nodes ",
			"\t\t\tsample ",
			"\t\t\td = {0:[1,3],3:[2,4,5]} ",
			"\t@returns",
			"\t\tlist ans: list of depthes of each node",
			"\t'''",
			"\tqueue = deque([u])",
			"\tans = [-1] * (n+1)",
			"\twhile queue:",
			"\t\tv = queue.popleft()",
			"\t\tfor i in d[v]:",
			"\t\t\tif ans[i] == -1:",
			"\t\t\t\tans[i] = v",
			"\t\t\t\tqueue.append(i)",
			"\treturn ans"
		],
		"description": "bfs template"
	}
}